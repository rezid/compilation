#+STARTUP: hidestars
#+TODO: TODO(t!) STARTED(s@/!) WAITING(w@/!) SOMEDAY(S@/!) | DONE(d!) CANCELED(c@!)
#+PRIORITIES: A C B

			   *Cours de Compilation*

(Il est préférable d'ouvrir ce fichier texte sous Emacs.)
(Appuyez sur [TAB] pour dérouler les items suivis de "...")

* Cours 1 <2016-09-12>
** Introduction du cours
*** Qu'est-ce qu'un compilateur?
    - définition informelle
    - syntaxe et sémantique d'un langage de programmation
    - définition formelle
*** Pourquoi un cours de compilation en M1?
    - devenir de meilleurs programmeurs
    - apprendre des techniques de programmation utiles au développement
    - un sujet transversal de l'informatique
** Préliminaire: un sondage
   - Qui a déjà programmé en OCaml?
   - Qui a déjà écrit un analyseur syntaxique?
   - Qui a suivi le cours de machine virtuelle?
** Un mini-compilateur pour le langage Marthe
   - voir le fichier marthe.ml
** Le projet de compilation
   - description du projet
   - architecture du projet
   - travail demandé
   - présentation de l'arbre des sources
** Fonctionnement du cours
   - un cours dans Emacs et au tableau
   - un cours orienté "projet"
   - deux semestres pour un premier "gros" projet
   - les jalons et leurs validations
   - des soutenances
   - modalités d'évaluation:
     70% projet + 30% examen sur papier (portant sur le projet)
     Sur la note de projet, 3 points réservés:
     - 1 point si vous avez posé (ou répondu à) au moins 5 questions
       (productions pertinentes, bien formulées) sur le forum.
     - 1 point si vous avez contribué à la réussite globale du projet
       en faisant au moins 5 "pull requests" sur le projet GIT public.
     - 1 point si la moyenne de la promo (moins les "fantômes") est supérieur à 13.
*** TODO Forker le GIT via le gitlab: 
    http://moule.informatique.univ-paris-diderot.fr:8080
    DEADLINE:<2016-09-19>
*** TODO Remplir le fichier AUTEURS (2 étudiants par groupes)
    DEADLINE:<2016-09-19>
*** TODO Rajouter les enseignants (via gitlab)
    DEADLINE:<2016-09-19>
    Pierre Letouzey
    Michele Pagani
    Yann Regis-Gianas
*** TODO Faire une pull-request pour mettre à jour le fichier /.mrconfig
    DEADLINE:<2016-09-19>
*** TODO S'inscrire sur http://faq.compilation.hackojo.org
    DEADLINE:<2016-09-19>
*** TODO S'inscrire sur https://groups.google.com/forum/#!forum/compilix
    DEADLINE: <2016-09-19>
*** TODO Travailler régulièrement sur le GIT.
*** TODO Poser des questions sur le site FAQ
* Cours 2 <2016-09-19>
** Retour sur le fonctionnement du cours
   - Forker le GIT.
   - Lire les TODOs dans doc/journal.org
   - 2 cours puis 1 TP
   - Prendre des notes
** L'arbre de sources du compilateur Flap
   - Makefile
   - Arborescence
   - Modules généraux: Languages, Compilers, Flap
   - MiniHopix
   - Méthode de développement dirigée par les tests et incrémentale.
** Les générateurs de code
   - Qu'est-ce que c'est?
   - Pourquoi les utiliser?
** Analyse lexicale
   - Définition
   - Lexèmes et valeurs sémantiques
   - ocamllex
** TODO Lire la documentation de OCamllex
** TODO Lire la documentation de Menhir
** TODO TD1
* Cours 3 <2016-10-03>
** Analyse syntaxique: les définitions
   - Langages
   - Grammaire algébrique
   - Hiérarchie de Chomsky
   - Dérivation d'un mot par une grammaire
   - Multiples dérivations, dérivations équivalentes pour l'analyse
   - Arbre de dérivation d'un mot
   - Ambiguïté
   - Formalisation du problème de l'analyse syntaxique
   - Arbre de syntaxe concrète et arbre de syntaxe abstraite
** Classification des algorithmes d'analyses syntaxiques
   - Algorithmes ascendants
   - Algorithmes descendants
** Menhir, point de vue utilisateur
** Références bibliographiques
   - Appel, "Modern Compiler Implementation" (à la bibliothèque)
   - Grune, "Parsing techniques" (PDF en ligne)
* Cours 4 <2016-10-17>
** Unger
** LL(1)
* Cours 5 <2016-11-07>
** Point projet
** Earley
** LR(0)
** LR(1)
** LALR(1)
* Cours 6 <2016-11-14>
** Point projet
** Syntaxe!
*** BNF d'arbres
    e ::= n | e + e | e * e

    type e = Int of int | Plus of e * e | Mul of e * e
*** Sémantique à petits pas

    ——————————
     1 + 2 → 3
    ———————————————————
    (1 + 2) + 3 → 3 + 3

    —————————
    3 + 3 → 6

*** Différence entre "let x = 1 in ..." et "int x = 1; ..."

    int x = 1;
    y = x + 1;
    ...

    let x = f y in
    x + x

*** Occurrences libres et liées

    let y = *x* in
    let x = 0 in
      /x/ + y

    (en gras : une occurrence libre de x.)
    (en italique : une occurrence liée de x.)

    On peut renommer une occurrence liée :

    let y = *u* in
    let z = 0 in
      /z/ + y


    let x = *x* in /x/

*** Explicitation des fermetures

    y ∈ FV (fun x -> x + y)

    (fun x -> x + y)[ y = 10 ]

* Cours 7 <2016-12-05>
** Rappel des épisodes précédents
   - Notion de syntaxe
   - Notion de liaison de noms
   - Les pointeurs de fonction en C ne sont pas des représentations
     sérieuses des fonctions
   - La notion de fermeture

** Différents évaluateurs pour un langage arithmétique avec "let"
   - Sémantique à petits pas
   - Sémantique à grands pas avec environnements d'évaluation
** Jalon 2 du projet
   - Présentation de la spécification de l'année dernière
   - Règles du "while"
* Cours 8 <2016-12-12>
** Analyse statique
   - Bonne liaison des noms
** Compilation vers une machine
* Cours 9 <2016-12-14> de 9h30 à 11h30 en salle 1008
** Jalon 2
** Examen
** Les fonctions de seconde classe
** Les fonctions de première classe
* Cours 10 <2017-01-17>
** Exceptionnellement, séance de 1h15
** Pas de TD cette semaine
** Où est parti le forum?
** Retour sur le jalon 2
** Présentation de la chaîne de compilation
*** Hopix    -> Hobix
*** Hobix    -> Fopix
*** Fopix    -> Retrolix
*** Retrolix -> Retrolix
*** Retrolix -> MIPS
** TODO Lire la spécification de MIPS
* Cours 11 <2017-01-24>
** TODO MIPS
** TODO Le typage

